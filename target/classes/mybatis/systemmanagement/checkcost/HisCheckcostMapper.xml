<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.systemmanagement.checkcost.mapper.HisCheckCostMapper">

	<resultMap type="HisCheckCost" id="HisCheckCostResult">
		<id     property="checkId"     column="check_id"     />
		<result property="checkName"   column="check_name"   />
		<result property="checkKeyWord"   column="check_keyword"   />
		<result property="checkPrice"    column="check_price"   />
		<result property="checkCost" column="check_cost"   />
		<result property="checkUnit"  column="check_unit"      />
		<result property="checkCategory"  column="check_category"      />
		<result property="status"     column="status"      />
		<result property="createBy"   column="create_by"   />
		<result property="createTime" column="create_time" />
		<result property="updateBy"   column="update_by"   />
		<result property="updateTime" column="update_time" />
		<result property="remark"     column="remark" />
	</resultMap>
	<sql id="selectHisCheckVo">
        select
        d.check_id, d.check_name, d.check_keyword, d.check_price, d.check_cost, d.check_unit,check_category,
        d.status, d.create_by,
        d.create_time,d.update_by,d.update_time,d.remark
        from checkcost_lyw d
    </sql>
	<select id="selectCheckLsit" parameterType="HisCheckCost" resultMap="HisCheckCostResult">
        <include refid="selectHisCheckVo"/>
        <where>
		<if test="checkName != null and checkName != ''">
			AND d.check_name like concat('%', #{checkName}, '%')
		</if>

		<if test="checkCategory != null and checkCategory != ''">
				AND d.check_category = #{checkCategory}
		</if>

		<if test="checkKeyWord != null and checkKeyWord !=''">
				AND d.check_keyword like concat('%', #{checkKeyWord}, '%')
		</if>

		<if test="status != null and status != ''">
			AND d.status = #{status}
		</if>
		</where>
		order by d.check_id
    </select>
	<select id="getALL" resultMap="HisCheckCostResult">
		select distinct check_category from checkcost_lyw;
	</select>

	<insert id="insertCheck" parameterType="HisCheckCost">
		insert into checkcost_lyw(
		<if test="checkId != null and checkId != 0">check_id,</if>
		<if test="checkName != null and checkName != ''">check_name,</if>
		<if test="checkKeyWord != null and checkKeyWord != ''">check_keyword,</if>
		<if test="checkPrice != null and checkPrice != ''">check_price,</if>
		<if test="checkCost != null and checkCost != ''">check_cost,</if>
		<if test="checkUnit != null and checkUnit != ''">check_unit,</if>
		<if test="checkCategory != null and checkCategory != ''">check_category,</if>
		<if test="status != null">status,</if>
		<if test="createBy != null and createBy != ''">create_by,</if>
		create_time
		)values(
		<if test="checkId != null and checkId != 0">#{checkId},</if>
		<if test="checkName != null and checkName != ''">#{checkName},</if>
		<if test="checkKeyWord != null and checkKeyWord != ''">#{checkKeyWord},</if>
		<if test="checkPrice != null and checkPrice != ''">#{checkPrice},</if>
		<if test="checkCost != null and checkCost != ''">#{checkCost},</if>
		<if test="checkUnit != null and checkUnit != ''">#{checkUnit},</if>
		<if test="checkCategory != null and checkCategory != ''">#{checkCategory},</if>
		<if test="status != null">#{status},</if>
		<if test="createBy != null and createBy != ''">#{createBy},</if>
		#{createTime}
		)
	</insert>

	<select id="getCheckById" parameterType="Long" resultMap="HisCheckCostResult">
		<include refid="selectHisCheckVo"/>
		where check_id = #{checkId}
	</select>

	<update id="updateCheck" parameterType="HisCheckCost">
		update checkcost_lyw
		<set>
			<if test="checkName != null and checkName != ''">check_name = #{checkName},</if>
			<if test="checkKeyWord != null and checkKeyWord != ''">check_keyword = #{checkKeyWord},</if>
			<if test="checkPrice != null and checkPrice != ''">check_price = #{checkPrice},</if>
			<if test="checkCost != null and checkCost != ''">check_cost = #{checkCost},</if>
			<if test="checkUnit != null and checkUnit != ''">check_unit = #{checkUnit},</if>
			<if test="checkCategory != null and checkCategory != ''">check_category = #{checkCategory},</if>
			<if test="status != null and status != ''">status = #{status},</if>
			<if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
			update_time = #{updateTime}
		</set>
		where check_id = #{checkId}
	</update>

     <delete id="removeCheck">
		 delete from checkcost_lyw where check_id in
		 <foreach collection="checkId" separator="," open="(" close=")" item="checkId">
			 #{checkId}
		 </foreach>
	 </delete>


    
    <select id="selectDeptListByRoleId" resultType="Integer">
		select d.dept_id
		from sys_dept d
            left join sys_role_dept rd on d.dept_id = rd.dept_id
        where rd.role_id = #{roleId}
            <if test="deptCheckStrictly">
              and d.dept_id not in (select d.parent_id from sys_dept d inner join sys_role_dept rd on d.dept_id = rd.dept_id and rd.role_id = #{roleId})
            </if>
		order by d.parent_id, d.order_num
	</select>
    

    
    <select id="checkDeptExistUser" parameterType="Long" resultType="int">
		select count(1) from sys_user where dept_id = #{deptId} and del_flag = '0'
	</select>
	
	<select id="hasChildByDeptId" parameterType="Long" resultType="int">
		select count(1) from sys_dept
		where del_flag = '0' and parent_id = #{deptId} limit 1
	</select>
	
	<select id="selectChildrenDeptById" parameterType="Long" resultMap="HisCheckCostResult">
		select * from sys_dept where find_in_set(#{deptId}, ancestors)
	</select>
	
	<select id="selectNormalChildrenDeptById" parameterType="Long" resultType="int">
		select count(*) from sys_dept where status = 0 and del_flag = '0' and find_in_set(#{deptId}, ancestors)
	</select>
	
	<select id="checkDeptNameUnique" resultMap="HisCheckCostResult">
	    <include refid="selectHisCheckVo"/>
		where dept_name=#{deptName} and parent_id = #{parentId} limit 1
	</select>

	

	
	<update id="updateDeptChildren" parameterType="java.util.List">
	    update sys_dept set ancestors =
	    <foreach collection="depts" item="item" index="index"
	        separator=" " open="case dept_id" close="end">
	        when #{item.deptId} then #{item.ancestors}
	    </foreach>
	    where dept_id in
	    <foreach collection="depts" item="item" index="index"
	        separator="," open="(" close=")">
	        #{item.deptId}
	    </foreach>
	</update>
	 
	 <update id="updateDeptStatus" parameterType="SysDept">
 	    update sys_dept
 	    <set>
 	        <if test="status != null and status != ''">status = #{status},</if>
 	        <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
 	        update_time = sysdate()
        </set>
 	    where dept_id in (${ancestors})
	</update>
	
	<delete id="deleteDeptById" parameterType="Long">
		update sys_dept set del_flag = '2' where dept_id = #{deptId}
	</delete>

</mapper> 