<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.systemmanagement.user.mapper.HisUserMapper">

	<resultMap type="HisUser" id="HisUserFeeResult">
		<id     property="userId"     column="user_id"     />
		<result property="userName"   column="user_name"   />
		<result property="userDepartment"   column="user_department"   />
		<result property="userPhone"   column="user_phone"   />
		<result property="userSex"   column="user_sex"   />
		<result property="userAge"   column="user_age"   />
		<result property="userClazz"   column="user_clazz"   />
		<result property="userRank"   column="user_rank"   />
		<result property="userPassword"     column="user_password"      />
		<result property="userRole"     column="user_role"      />
		<result property="userBackground"   column="user_background"   />
		<result property="status"     column="status"      />
		<result property="createBy"   column="create_by"   />
		<result property="createTime" column="create_time" />
		<result property="updateBy"   column="update_by"   />
		<result property="updateTime" column="update_time" />
		<result property="remark"     column="remark" />
	</resultMap>
	<sql id="selecthisListUser">
        select
        d.user_id, d.user_name, d.user_department,d.user_phone,d.user_sex,d.user_age,d.user_clazz,d.user_rank,d.user_background,
        d.status, d.create_by,
        d.create_time,d.update_by,d.update_time,d.remark
        from user_lyw d
    </sql>
	<select id="hisListUser" parameterType="HisUser" resultMap="HisUserFeeResult">
        <include refid="selecthisListUser"/>
        <where>
		<if test="userName != null and userName != ''">
			AND d.user_name like concat('%', #{userName}, '%')
		</if>

		<if test="userDepartment != null and userDepartment != ''">
				AND d.user_department like concat('%', #{userDepartment}, '%')
		</if>

		<if test="createTime != null and createTime != ''">
				AND d.create_time like concat('%', #{createTime}, '%')
		</if>

		<if test="userPhone != null and userPhone != ''">
				AND d.user_phone like concat('%', #{userPhone}, '%')
		</if>

			<if test="params.beginTime != null and params.beginTime != ''"><!-- 开始时间检索 -->
				AND date_format(d.create_time,'%y%m%d') &gt;= date_format(#{params.beginTime},'%y%m%d')
			</if>
			<if test="params.endTime != null and params.endTime != ''"><!-- 结束时间检索 -->
				AND date_format(d.create_time,'%y%m%d') &lt;= date_format(#{params.endTime},'%y%m%d')
			</if>

		<if test="status != null and status != ''">
			AND d.status = #{status}
		</if>
		</where>
		order by d.user_id
    </select>

	<select id="getALL" resultMap="HisUserFeeResult">
		select distinct check_category from checkcost_lyw;
	</select>

	<insert id="insertUserMapper" parameterType="HisUser">
		insert into user_lyw(
		<if test="userId != null and userId != 0">user_id,</if>
		<if test="userName != null and userName != ''">user_name,</if>
		<if test="userDepartment != null and userDepartment != ''">user_department,</if>
		<if test="userPhone != null and userPhone != ''">user_phone,</if>
		<if test="userSex != null and userSex != ''">user_sex,</if>
		<if test="userAge != null and userAge != ''">user_age,</if>
		<if test="userClazz != null and userClazz != ''">user_clazz,</if>
		<if test="userRank != null and userRank != ''">user_rank,</if>
		<if test="userBackground != null and userBackground != ''">user_background,</if>
		<if test="status != null">status,</if>
		<if test="createBy != null and createBy != ''">create_by,</if>
		create_time
		)values(
		<if test="userId != null and userId != 0">#{userId},</if>
		<if test="userName != null and userName != ''">#{userName},</if>
		<if test="userDepartment != null and userDepartment != ''">#{userDepartment},</if>
		<if test="userPhone != null and userPhone != ''">#{userPhone},</if>
		<if test="userSex != null and userSex != ''">#{userSex},</if>
		<if test="userAge != null and userAge != ''">#{userAge},</if>
		<if test="userClazz != null and userClazz != ''">#{userClazz},</if>
		<if test="userRank != null and userRank != ''">#{userRank},</if>
		<if test="userBackground != null and userBackground != ''">#{userBackground},</if>
		<if test="status != null">#{status},</if>
		<if test="createBy != null and createBy != ''">#{createBy},</if>
		#{createTime}
		)
	</insert>

	<select id="UserGetAll" parameterType="Long" resultMap="HisUserFeeResult">
		<include refid="selecthisListUser"/>
		where user_id = #{userId}
	</select>

	<update id="updateHisUser" parameterType="HisUser">
		update user_lyw
		<set>
			<if test="userName != null and userName != ''">user_name = #{userName},</if>
			<if test="userDepartment != null and userDepartment != ''">user_department = #{userDepartment},</if>
			<if test="userPhone != null and userPhone != ''">user_phone = #{userPhone},</if>
			<if test="userAge != null and userAge != ''">user_age = #{userAge},</if>
			<if test="userSex != null and userSex != ''">user_sex = #{userSex},</if>
			<if test="userClazz != null and userClazz != ''">user_clazz = #{userClazz},</if>
			<if test="userPassword != null and userPassword != ''">user_password=#{userPassword},</if>
			<if test="userRole != null and userRole != ''">user_role=#{userRole},</if>
			<if test="status != null and status != ''">status = #{status},</if>
			<if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
			update_time = #{updateTime}
		</set>
		where user_id = #{userId}
	</update>

     <delete id="removeHisUser">
		 delete from user_lyw where user_id in
		 <foreach collection="userId" separator="," open="(" close=")" item="userId">
			 #{userId}
		 </foreach>
	 </delete>


    
    <select id="selectDeptListByRoleId" resultType="Integer">
		select d.dept_id
		from sys_dept d
            left join sys_role_dept rd on d.dept_id = rd.dept_id
        where rd.role_id = #{roleId}
            <if test="deptCheckStrictly">
              and d.dept_id not in (select d.parent_id from sys_dept d inner join sys_role_dept rd on d.dept_id = rd.dept_id and rd.role_id = #{roleId})
            </if>
		order by d.parent_id, d.order_num
	</select>
    

    
    <select id="checkDeptExistUser" parameterType="Long" resultType="int">
		select count(1) from sys_user where dept_id = #{deptId} and del_flag = '0'
	</select>
	
	<select id="hasChildByDeptId" parameterType="Long" resultType="int">
		select count(1) from sys_dept
		where del_flag = '0' and parent_id = #{deptId} limit 1
	</select>
	
	<select id="selectChildrenDeptById" parameterType="Long" resultMap="HisUserFeeResult">
		select * from sys_dept where find_in_set(#{deptId}, ancestors)
	</select>
	
	<select id="selectNormalChildrenDeptById" parameterType="Long" resultType="int">
		select count(*) from sys_dept where status = 0 and del_flag = '0' and find_in_set(#{deptId}, ancestors)
	</select>
	
	<select id="checkDeptNameUnique" resultMap="HisUserFeeResult">
	    <include refid="selecthisListUser"/>
		where dept_name=#{deptName} and parent_id = #{parentId} limit 1
	</select>

	

	
	<update id="updateDeptChildren" parameterType="java.util.List">
	    update sys_dept set ancestors =
	    <foreach collection="depts" item="item" index="index"
	        separator=" " open="case dept_id" close="end">
	        when #{item.deptId} then #{item.ancestors}
	    </foreach>
	    where dept_id in
	    <foreach collection="depts" item="item" index="index"
	        separator="," open="(" close=")">
	        #{item.deptId}
	    </foreach>
	</update>
	 
	 <update id="updateDeptStatus" parameterType="SysDept">
 	    update sys_dept
 	    <set>
 	        <if test="status != null and status != ''">status = #{status},</if>
 	        <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
 	        update_time = sysdate()
        </set>
 	    where dept_id in (${ancestors})
	</update>
	
	<delete id="deleteDeptById" parameterType="Long">
		update sys_dept set del_flag = '2' where dept_id = #{deptId}
	</delete>

</mapper> 